- Finish Implementing the json structure across all the agents
    - basically just keep up with the orginal by append the responses to it.
    - allow the reviewer to craft new contexts to give to the to the Synthesizer
    - lets say planner agent generates:
    {
          "exploration_plans": [
            {
              "plan_id": "J",
              "strategy": "First Principles Thinking",
              "steps": [
                { "step_id": "J1", "instructions": "Break commuting into core needs: safe, fast, low-cost, low-emission mobility." },
                { "step_id": "J2", "instructions": "Question assumptions on cars/buses/trains; note constraints ignored." },
                { "step_id": "J3", "instructions": "Propose â‰¥ 2 radically different mobility concepts satisfying core needs." }
              ]
            }
          ]
        }

    And the thinkeragent for each response generates a response, the response should be appended to the step_id as a new field called "response"
    {
        "step_id": "J1",
        "instructions": "Break commuting into core needs: safe, fast, low-cost, low-emission mobility.",
        "response": "The response to the instructions"
    }
    - Now the review can respond with an object to craft the best context for the synthesizer to use.
        - Call this context "context_to_use". This will a list of plan_ids and step_ids that the synthesizer should use to generate a response.
        - It'll looks something like this:
        {
            "context_to_use": [
                {
                    "plan_id": "J",
                    "step_ids": ["J1", "J2", "J3"]
                }
            ]
        }
    - since the PlannerAgent can generate multiple plans, the context_to_use should be able to handle this by providing the most relevant and most useful plans and step_ids to use.
    - all aren't to be used but can be. the priority is to use the most relevant and most useful plans and step_ids to use.
    
- review thoughts
- Deep Research: are these the best and most efficient algorithms to use for the tasks? Are there any better ones?
    - the algorithm of thoughts paper uses Depth First Search and Breadth First Search, Find out how these can be used to improve the pipeline of at all
- Explain in the PlannerAgent that the Agents will be run in parallel so the responses of a step is not to be expected to be used in the next step.
